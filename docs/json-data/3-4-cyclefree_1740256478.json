{
  "problemName":"3-4-cyclefree",
  "inputs":[
    15
  ],
  "message":"The score 26 is optimal. This was a sample-run, mostly to test displaying the results on the website.",
  "config":{
    "functions_per_prompt":2,
    "num_islands":10,
    "reset_period":14400,
    "cluster_sampling_temperature_init":0.1,
    "cluster_sampling_temperature_period":30000,
    "backup_period":30,
    "backup_folder":"./data/backups"
  },
  "specCode":"\"\"\"Find undirected graphs with many edges that don't contain a 3-cycle or 4-cycle.\n\nOn every iteration, improve priority_v1 over the priority_vX methods from previous iterations.\nMake only small code-changes. Do not use np.random.\n\"\"\"\n\nimport funsearch\n\n\n@funsearch.run\ndef evaluate(total_vertex_count: int) -> float:\n  \"\"\"Returns the number of edges in an undirected graph on `total_vertex_count` vertices having no 3-cycles or 4-cycles.\"\"\"\n  return len(solve(total_vertex_count))\n\n\ndef solve(total_vertex_count: int) -> set[tuple[int, int]]:\n  \"\"\"Returns a large graph on `total_vertex_count` vertices without 3-cycles or 4-cycles.\"\"\"\n  edge_priorities = {\n    (vertex_v, vertex_w): priority(vertex_v, vertex_w, total_vertex_count)\n    for vertex_v in range(total_vertex_count)\n    for vertex_w in range(vertex_v + 1, total_vertex_count)\n  }\n  neighbors = {vertex_v: set() for vertex_v in range(total_vertex_count)}\n\n  for (vertex_v, vertex_w), _ in sorted(edge_priorities.items(), key=lambda x: -x[1]):\n    # Does adding the edge {vertex_v, vertex_w} add a 3-cycle?\n    if not neighbors[vertex_v].isdisjoint(neighbors[vertex_w]):\n      continue\n\n    # Does adding the edge {vertex_v, vertex_w} add a 4-cycle?\n    has_4_cycle = False\n    for neighbor_u in neighbors[vertex_v]:\n      if not neighbors[neighbor_u].isdisjoint(neighbors[vertex_w]):\n        has_4_cycle = True\n        break\n    if has_4_cycle:\n      continue\n\n    # There's no 3-cycle or 4-cycle, so insert the edge\n    neighbors[vertex_v].add(vertex_w)\n    neighbors[vertex_w].add(vertex_v)\n\n  edges = {\n    (vertex_v, vertex_w)\n    for vertex_v in range(total_vertex_count)\n    for vertex_w in neighbors[vertex_v]\n    if vertex_w > vertex_v\n  }\n  return edges\n\n\n@funsearch.evolve\ndef priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return 0.0\n",
  "timestamp":"1740256478",
  "highestRunIndex":41,
  "islands":[
    {
      "improvements":[
        [
          0,
          14,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return 0.0\n\n"
        ],
        [
          1,
          17,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return vertex_v * total_vertex_count + vertex_w - vertex_v - 1 - (vertex_v * (vertex_v - 1) / 2) - (vertex_v * (vertex_v - 1) * (vertex_v - 2) * (vertex_v - 3) / 24) - (vertex_w - vertex_v) - 1\n\n"
        ],
        [
          2,
          24,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return total_vertex_count - abs(vertex_v - vertex_w) - 1.0\n\n"
        ],
        [
          12,
          25,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  # Decrease the priority for edges with odd sum of vertices\n  if (vertex_v + vertex_w) % 2 == 1:\n    return total_vertex_count - (vertex_w - vertex_v) - 0.5\n  return total_vertex_count - (vertex_w - vertex_v) + 0.5\n\n"
        ],
        [
          38,
          26,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  if vertex_v % 2 == 1 and vertex_w % 2 == 0:\n    return total_vertex_count - (vertex_w - vertex_v) - 0.5\n  elif vertex_v % 2 == 0 and vertex_w % 2 == 1:\n    return total_vertex_count - (vertex_w - vertex_v) + 0.5\n  return total_vertex_count - (vertex_w - vertex_v) + min(vertex_v, vertex_w) * 0.1\n\n"
        ]
      ],
      "successCount":39,
      "failureCount":2
    },
    {
      "improvements":[
        [
          0,
          14,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return 0.0\n\n"
        ],
        [
          8,
          24,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return total_vertex_count - abs(vertex_v - vertex_w) - 1.0\n\n"
        ]
      ],
      "successCount":19,
      "failureCount":2
    },
    {
      "improvements":[
        [
          0,
          14,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return 0.0\n\n"
        ],
        [
          2,
          15,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  if (total_vertex_count - 1) * total_vertex_count / 2 <= 4 * total_vertex_count:\n    return 0.0\n  \n  return -total_vertex_count * vertex_v - vertex_w * (vertex_w - vertex_v) - (vertex_v + 1) * (total_vertex_count - vertex_w) - vertex_w * (vertex_w - vertex_v - 1) / 2\n\n"
        ],
        [
          3,
          24,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return total_vertex_count - abs(vertex_v - vertex_w)\n\n"
        ],
        [
          9,
          25,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return vertex_v * total_vertex_count + vertex_w - vertex_v - vertex_w - (vertex_v * vertex_w) / 2 - 1.0\n\n"
        ]
      ],
      "successCount":32,
      "failureCount":1
    },
    {
      "improvements":[
        [
          0,
          14,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return 0.0\n\n"
        ],
        [
          3,
          23,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  if abs(vertex_v - vertex_w) < total_vertex_count / 2:\n    return abs(vertex_v - vertex_w) / total_vertex_count\n  else:\n    return 1.0 - abs(vertex_v - vertex_w) / total_vertex_count\n\n"
        ],
        [
          18,
          24,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  if abs(vertex_v - vertex_w) < total_vertex_count / 2:\n    return (abs(vertex_v - vertex_w) + 1) / total_vertex_count\n  else:\n    return 1.0 - (abs(vertex_v - vertex_w) + 1) / total_vertex_count\n\n"
        ]
      ],
      "successCount":30,
      "failureCount":3
    },
    {
      "improvements":[
        [
          0,
          14,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return 0.0\n\n"
        ],
        [
          2,
          15,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  if abs(vertex_v - vertex_w) == 1:\n    return -1.0\n  elif abs(vertex_v - vertex_w) == 2:\n    return -2.0\n  else:\n    return 0.0\n\n"
        ],
        [
          5,
          24,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return vertex_v * total_vertex_count + vertex_w - (vertex_v + vertex_w) * (vertex_v + vertex_w + 1) / 2.0\n\n"
        ],
        [
          33,
          25,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return total_vertex_count - abs(vertex_v - vertex_w) - 0.75 * (vertex_v + vertex_w) + 1.0  # Small code-change from `priority_v1`\n\n"
        ]
      ],
      "successCount":34,
      "failureCount":3
    },
    {
      "improvements":[
        [
          0,
          14,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return 0.0\n\n"
        ]
      ],
      "successCount":13,
      "failureCount":0
    },
    {
      "improvements":[
        [
          0,
          14,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return 0.0\n\n"
        ],
        [
          8,
          25,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return vertex_v * total_vertex_count + vertex_w - (vertex_v + vertex_w)  # Adjust priority calculation by subtracting sum of vertices\n\n"
        ]
      ],
      "successCount":32,
      "failureCount":1
    },
    {
      "improvements":[
        [
          0,
          14,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return 0.0\n\n"
        ],
        [
          9,
          24,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return total_vertex_count - abs(vertex_w - vertex_v) - 1.0\n\n"
        ],
        [
          24,
          25,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  \"\"\"Improved version of `priority_v4`.\"\"\"\n  return (total_vertex_count - abs(vertex_v - vertex_w)) * (vertex_v * vertex_w + 2) / total_vertex_count\n\n"
        ]
      ],
      "successCount":34,
      "failureCount":7
    },
    {
      "improvements":[
        [
          0,
          14,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return 0.0\n\n"
        ],
        [
          1,
          24,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return total_vertex_count - abs(vertex_v - vertex_w)\n\n"
        ]
      ],
      "successCount":28,
      "failureCount":1
    },
    {
      "improvements":[
        [
          0,
          14,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  return 0.0\n\n"
        ],
        [
          2,
          24,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  if (vertex_w - vertex_v) == 1:\n    return 0.0\n  else:\n    return 1.0 / ((vertex_w - vertex_v) ** 2) \n\n"
        ],
        [
          19,
          25,
          "def priority(vertex_v: int, vertex_w: int, total_vertex_count: int) -> float:\n  \"\"\"Returns the priority with which we want to add the undirected edge {vertex_v, vertex_w} to the graph, where vertex_v < vertex_w.\n  `total_vertex_count` is the number of vertices in the graph.\n  \"\"\"\n  if (vertex_w - vertex_v) == 1:\n    return 0.0\n  elif (vertex_w - vertex_v) % 2 == 0:\n    return 1.0 / (vertex_w - vertex_v)\n  else:\n    return 1.0 / ((vertex_w - vertex_v) ** 2)\n\n"
        ]
      ],
      "successCount":17,
      "failureCount":4
    }
  ]
}