{
  "config":{
    "inputs":[
      3
    ],
    "specification":"\"\"\"Find sets for which the rounding algorithm on the gasoline-problem has a poor (high) approximation-ratio.\n\nThe gasoline-problem find a permutation of the xs and ys (lists of positive integers) such that maximum of the\ndifferences of prefix-sums is as small as possible, i.e. maximum_(m,n) zs[n]-zs[m] is as as small as possible,\nwhere zs[n] = xs[0] - ys[0] + xs[1] - ys[1] + ... + xs[n//2] - (ys[n] if n is odd else 0).\n\nAs such, the problem is invariant under a permutation of the xs and ys.\n\nOn every iteration, improve gasoline_v1 over the gasoline_vX methods from previous iterations.\nThe methods must be deterministic.\nMake only small code-changes.\n\"\"\"\n\nimport funsearch\nfrom funsearch.gasoline.iterative_rounding import SlotOrdered\n\n\n@funsearch.run\ndef evaluate(n: int) -> float:\n  \"\"\"Returns the approximation-ratio of the gasoline problem.\"\"\"\n  xs, ys = gasoline(n)\n\n  # Assert determinancy\n  if (xs, ys) != gasoline(n):\n    return 0\n\n  # Assert non-negativity\n  if any(x < 0 for x in xs) or any(y < 0 for y in ys):\n    return 0\n\n  return SlotOrdered().approximation_ratio(xs, ys)\n\n\n@funsearch.evolve\ndef gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2 * n / i)\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n",
    "problem_name":"gasoline-list",
    "message":"Perturb Lucas' optimal function\n\nChanges from:\n  u_i = 2**n * (1 - 2 ** (-i))\nto:\n  u_i = 2*n / i\nAnd, to not give too much away, the final 2**n sequence to 2*n.",
    "functions_per_prompt":2,
    "num_islands":10,
    "reset_period":14400,
    "cluster_sampling_temperature_init":0.1,
    "cluster_sampling_temperature_period":30000
  },
  "timestamp":1740234412,
  "highestRunIndex":1105,
  "islands":[
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2 * n / i)\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          93,
          1.25,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v4`.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u - 2 if i % 2 == 0 else u + 2 for _ in range(2**i)])  # Change xs values based on modulo 2 with larger difference\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2 * n / i)\n  ys.extend([u + 3 if i % 2 == 0 else u - 3 for _ in range(2**n)])  # Change ys values based on modulo 2 with larger difference\n  return xs, ys\n\n"
        ],
        [
          124,
          1.3333333333333333,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u - 2 if i % 2 == 0 else u + 3 for _ in range(2**i)])  # Change xs values based on modulo 2 with larger difference\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2 * n / i)\n  ys.extend([u + 3 if i % 2 == 0 else u - 3 for _ in range(2**n)])  # Change ys values based on modulo 2 with larger difference\n  return xs, ys\n\n"
        ],
        [
          515,
          1.4285714285714286,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int((n + i) / i)  \n    xs.extend([u - 1 if i % 2 == 0 else u + 3 for _ in range(2**i)])  \n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(n + i) for _ in range(2**n - 1)]) \n  xs.append(0)\n  u = int((n + i) / i)  \n  ys.extend([u + 3 if i % 2 == 0 else u - 1 for _ in range(2**n)])  \n  return xs, ys\n\n"
        ]
      ],
      "successCount":701,
      "failureCount":300
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2 * n / i)\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          631,
          1.000002785915019,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Modify the xs values to make the differences even larger.\"\"\"\n  xs = [i**50 for i in range(1, n + 1)]  # Further increased differences\n  ys = [3**i + i**50 + 1000000000000000000 for i in range(1, n + 1)]\n  return xs, ys\n\n"
        ]
      ],
      "successCount":687,
      "failureCount":274
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2 * n / i)\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          470,
          1.5,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v3`.\"\"\"\n  xs = [i * (n - i) for i in range(1, n + 1)]\n  ys = [i for i in range(1, n + 1)]\n  return xs, ys\n\n"
        ]
      ],
      "successCount":559,
      "failureCount":309
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2 * n / i)\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          10,
          1.3636363636363635,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Create sets with larger discrepancies between values.\"\"\"\n  xs, ys = [], []\n  large_value = 10 * n\n\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([large_value if j % 2 == 0 else u for j in range(2**i)])\n    ys.extend([u if j % 2 == 0 else large_value for j in range(2**i)])\n  \n  xs.extend([large_value if j % 2 == 0 else 0 for j in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([large_value if j % 2 == 0 else u for j in range(2**n)])\n\n  return xs, ys\n\n"
        ],
        [
          31,
          1.5,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  xs, ys = [], []\n  large_value = 10 * n\n\n  for i in range(1, n):\n    u = int(4 * n / i)  # Further increase the multiplier for larger discrepancies\n    xs.extend([large_value if j % 2 == 0 else u for j in range(2**i)])\n    ys.extend([u if j % 2 == 0 else large_value for j in range(2**i)])\n  \n  xs.extend([large_value if j % 2 == 0 else 0 for j in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([large_value if j % 2 == 0 else u for j in range(2**n)])\n\n  return xs, ys\n\n"
        ],
        [
          125,
          1.5244755244755244,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  xs, ys = [], []\n  large_value = 40 * n\n\n  for i in range(1, n):\n    u = int(15 * n / i)  # Adjust the multiplier for larger discrepancies\n    xs.extend([large_value if j % 2 == 0 else u for j in range(2**i)])\n    ys.extend([u if j % 2 == 0 else large_value for j in range(2**i)])\n  \n  xs.extend([large_value if j % 2 == 0 else 0 for j in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([large_value if j % 2 == 0 else u for j in range(2**n)])\n\n  return xs, ys\n\n"
        ],
        [
          144,
          1.5323741007194245,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  large_value = 80 * n\n\n  for i in range(1, n):\n    u = int(25 * n / i)  # Adjust the multiplier once again for larger discrepancies\n    xs.extend([large_value if j % 2 == 0 else u for j in range(2**i)])\n    ys.extend([u if j % 2 == 0 else large_value for j in range(2**i)])\n  \n  xs.extend([large_value if j % 2 == 0 else 0 for j in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([large_value if j % 2 == 0 else u for j in range(2**n)])\n\n  return xs, ys\n\n"
        ],
        [
          158,
          1.5524079320113315,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n\n  xs, ys = [], []\n  large_value = 100 * n\n\n  for i in range(1, n):\n    u = int(35 * n / i)  # Adjust the multiplier once again for larger discrepancies\n    xs.extend([large_value if j % 2 == 0 else u for j in range(2**i)])\n    ys.extend([u if j % 2 == 0 else large_value for j in range(2**i)])\n  \n  xs.extend([large_value if j % 2 == 0 else 0 for j in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([large_value if j % 2 == 0 else u for j in range(2**n)])\n\n  return xs, ys\n\n"
        ],
        [
          221,
          1.553191489361702,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  large_value = 200 * n\n\n  for i in range(1, n):\n    u = int(70 * n / i)  # Adjust the multiplier for even better approximation\n    xs.extend([large_value if j % 2 == 0 else u for j in range(2**i)])\n    ys.extend([u if j % 2 == 0 else large_value for j in range(2**i)])\n  \n  xs.extend([large_value if j % 2 == 0 else 0 for j in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([large_value if j % 2 == 0 else u for j in range(2**n)])\n\n  return xs, ys\n\n"
        ],
        [
          241,
          1.5558739255014327,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  large_value = 200 * n\n\n  for i in range(1, n):\n    u = int(65 * n / i)  # Continuously adjust the multiplier for even better approximation\n    xs.extend([large_value if j % 2 == 0 else u for j in range(2**i)])\n    ys.extend([u if j % 2 == 0 else large_value for j in range(2**i)])\n  \n  xs.extend([large_value if j % 2 == 0 else 0 for j in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([large_value if j % 2 == 0 else u for j in range(2**n)])\n\n  return xs, ys\n\n"
        ],
        [
          277,
          1.5714285714285714,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n\n  xs, ys = [], []\n  large_value = 300 * n\n\n  for i in range(1, n):\n    u = int(100 * n / i)  # Continue adjusting the multiplier based on the performance\n    xs.extend([large_value if j % 2 == 0 else u for j in range(2**i)])\n    ys.extend([u if j % 2 == 0 else large_value for j in range(2**i)])\n  \n  xs.extend([large_value if j % 2 == 0 else 0 for j in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([large_value if j % 2 == 0 else u for j in range(2**n)])\n\n  return xs, ys\n\n"
        ]
      ],
      "successCount":644,
      "failureCount":397
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2 * n / i)\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          344,
          1.25,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = 2 * n // i + 1\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([2 * n for _ in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([u + 1 for _ in range(2**n)])\n  return xs, ys\n\n"
        ]
      ],
      "successCount":652,
      "failureCount":369
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2 * n / i)\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          429,
          1.3076923076923077,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(n):\n    u = int(4 * (n - i))  # Adjust multiplier calculation\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u-1 for _ in range(2**i)])  \n  xs.extend([int(4 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([int(4 * n) for _ in range(2**n)])  # Change multiplier calculation\n  return xs, ys\n\n"
        ],
        [
          513,
          1.368421052631579,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  xs, ys = [], []\n  for i in range(n):\n    u = int(6 * (n - i) + 1)  # Adjust multiplier calculation\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u-1 for _ in range(2**i)])  \n  xs.extend([int(6 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([int(6 * n) for _ in range(2**n)])  # Change multiplier calculation\n  return xs, ys\n\n"
        ],
        [
          516,
          1.3888888888888888,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  xs, ys = [], []\n  for i in range(n):\n    u = int(6 * (n - i))  # Adjust multiplier calculation\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u-1 for _ in range(2**i)])  \n  xs.extend([int(6 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([int(6 * n) for _ in range(2**n)])  # Change multiplier calculation\n  return xs, ys\n\n"
        ],
        [
          547,
          1.394736842105263,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v4`.\"\"\"\n  xs, ys = [], []\n  for i in range(n):\n    u = int(12 * (n - i) + i + 2)\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u-1 for _ in range(2**i)])\n  xs.extend([int(12 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([int(12 * n) for _ in range(2**n)])  \n  return xs, ys\n\n"
        ],
        [
          561,
          1.4444444444444444,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  xs, ys = [], []\n  for i in range(n):\n    u = int(5 * (n - i) + 3)  # Adjust multiplier calculation\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u-1 for _ in range(2**i)])  \n  xs.extend([int(5 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([int(5 * n) for _ in range(2**n)])  # Change multiplier calculation\n  return xs, ys\n\n"
        ],
        [
          624,
          1.5789473684210527,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(n):\n    u = int(5 * (n - i) + 3)  # Similar multiplier calculation to `gasoline_v1`\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u-1 for _ in range(2**i)])  \n  xs.extend([int(5 * n) + 1 for _ in range(2**n - 1)])  # Change multiplier calculation\n  xs.append(0)\n  ys.extend([int(5 * n) for _ in range(2**n)])  \n  return xs, ys\n\n"
        ],
        [
          641,
          1.6111111111111112,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(n):\n    u = int(5 * (n - i) + 3)  # Similar multiplier calculation to `gasoline_v1`\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u-1 for _ in range(2**i)])  \n  xs.extend([int(5 * n) + 1 for _ in range(2**n - 1)])  # Change multiplier calculation\n  xs.append(1)  # Change zero to one to alter rounding behavior\n  ys.extend([int(5 * n) for _ in range(2**n)])  \n  return xs, ys\n\n"
        ],
        [
          722,
          1.6363636363636365,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(n):\n    u = int(6 * (n - i) + 2)  # Same multiplier calculation as `gasoline_v1`\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u-1 for _ in range(2**i)])  \n  xs.extend([int(6 * n) + 2 for _ in range(2**n - 1)])  \n  xs.append(0)  # Change in constant value from `1` to `0`\n  ys.extend([int(6 * n) for _ in range(2**n)])  \n  return xs, ys\n\n"
        ],
        [
          1022,
          1.6521739130434783,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v4`.\"\"\"\n  xs, ys = [], []\n  for i in range(n):\n    u = int(7 * (n - i) + 1)  # Adjust multiplier calculation\n    xs.extend([u for _ in range(2**i)])  \n    ys.extend([u-1 for _ in range(2**i)])  \n  xs.extend([int(7 * n) for _ in range(2**n - 1)])  \n  xs.append(0)  \n  ys.extend([int(7 * n) - 2 for _ in range(2**n)])  # Adjust multiplier calculation\n  return xs, ys\n\n"
        ]
      ],
      "successCount":790,
      "failureCount":315
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2 * n / i)\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          25,
          1.0666666666666667,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u + i for _ in range(2**i)])\n    ys.extend([u - i for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n)])\n  xs.append(0)\n  ys.extend([u + i for _ in range(2**n)])\n  \n  # Introduce outliers\n  outlier_x = 5 * n\n  outlier_y = 10 * n\n  xs.append(outlier_x)\n  ys.append(outlier_y)\n  return xs, ys\n\n"
        ],
        [
          395,
          1.1333333333333333,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u + i for _ in range(2**i)])\n    ys.extend([u - i for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n)])\n  xs.append(0)\n  ys.extend([u + i for _ in range(2**n)])\n  \n  # Introduce outliers\n  outlier_x = 5 * n\n  outlier_y = 10 * n\n  xs.append(outlier_x)\n  ys.append(outlier_y)\n  \n  # Increase the number of outliers\n  for _ in range(n):\n    xs.append(2 * n)\n    ys.append(3 * n)\n\n  return xs, ys\n\n"
        ],
        [
          444,
          1.1515151515151516,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u + i for _ in range(2**i)])\n    ys.extend([u - i for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n)])\n  xs.append(0)\n  ys.extend([u + i for _ in range(2**n)])\n  \n  # Introduce outliers\n  outlier_x = 5 * n\n  outlier_y = 10 * n\n  xs.append(outlier_x)\n  ys.append(outlier_y)\n  \n  # Make a small change to introduce a new outlier between the existing outliers\n  outlier_x_7 = 7 * n\n  outlier_y_7 = 8 * n\n  xs.append(outlier_x_7)\n  ys.append(outlier_y_7)\n\n  return xs, ys\n\n"
        ]
      ],
      "successCount":333,
      "failureCount":724
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2 * n / i)\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          1,
          1.05,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = [5, 10, 1, 10, 20]\n  ys = [20, 1, 20, 10, 5]\n  return xs, ys\n\n"
        ],
        [
          100,
          1.2,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v8`.\"\"\"\n  xs = [10, 5, 1, 10, 20]\n  ys = [20, 1, 20, 10, 5]\n  return xs, ys\n\n"
        ],
        [
          125,
          1.2666666666666666,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = [5, 10, 1, 10, 15]\n  ys = [10, 1, 15, 5, 20]\n  return xs, ys\n\n"
        ],
        [
          206,
          1.3333333333333333,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v8`.\"\"\"\n  xs = [10, 5, 1, 8, 12]\n  ys = [12, 1, 8, 10, 5]\n  return xs, ys\n\n"
        ],
        [
          920,
          1.3636363636363635,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = [10, 5, 1, 7, 11]\n  ys = [11, 1, 7, 10, 5]\n  return xs, ys\n\n"
        ]
      ],
      "successCount":721,
      "failureCount":320
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2 * n / i)\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          129,
          1.0689655172413792,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v3`.\"\"\"\n  \"\"\"Improved version of `gasoline_v3` with increased bias towards larger values and different calculations.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(12 * n / i) + 40  # Increased bias towards larger values by adding 40\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n\n  xs.extend([int(12 * n) + 40 for _ in range(2**n - 1)])  # Increased bias towards larger values\n  xs.append(0)\n  u = int(22 * n / i) + 35  # Increased bias towards larger values\n  ys.extend([u for _ in range(2**n)])\n  \n  return xs, ys\n\n"
        ],
        [
          142,
          1.1111111111111112,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n\n  \"\"\"Improved version of `gasoline_v6`.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(20 * n / i) + 60  # Increased bias towards larger values by adding 60\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n\n  xs.extend([int(20 * n) + 60 for _ in range(2**n - 1)])  # Increased bias towards larger values\n  xs.append(0)\n  u = int(30 * n / i) + 55  # Increased bias towards larger values\n  ys.extend([u for _ in range(2**n)])\n  \n  return xs, ys\n\n"
        ],
        [
          147,
          1.125,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  \"\"\"Improve gasoline_v1 over gasoline_v3, gasoline_v3 must be deterministic.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(10 * n / (n - i)) + 30  # Increased bias towards smaller values\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n\n  xs.extend([int(10 * n) + 30 for _ in range(2**n - 1)])  # Increased bias towards smaller values\n  xs.append(0)\n  u = int(20 * n / i) + 25  # Increased bias towards larger values\n  ys.extend([u for _ in range(2**n)])\n  \n  return xs, ys\n\n"
        ],
        [
          155,
          1.1388888888888888,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(15 * n / i) + 50  # Further increased bias towards larger values by adding 50\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n\n  xs.extend([int(15 * n) + 50 for _ in range(2**n - 1)])  # Further increased bias towards larger values\n  xs.append(0)\n  u = int(25 * n / i) + 45  # Further increased bias towards larger values\n  ys.extend([u for _ in range(2**n)])\n  \n  return xs, ys\n\n"
        ],
        [
          173,
          1.1886792452830188,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Final improved version of `gasoline_v2`.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(15 * n / i) + 30  # Even further increased bias towards larger values by adding 30\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u + 1 for _ in range(2**i)])  # Introduce even more randomness by adding 1 to u\n  xs.extend([int(15 * n) + 30 for _ in range(2**n - 1)])  # Even further increased bias towards larger values\n  xs.append(0)\n  u = int(22 * n / i) + 30  # Even further increased bias towards larger values\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          240,
          1.2115384615384615,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(15 * n / i) + 30  # Keep the bias towards larger values\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u if i % 2 == 0 else u + 1 for _ in range(2**i)])  # Alternate adding 1 based on parity of i\n  xs.extend([int(15 * n) + 30 for _ in range(2**n - 1)])  # Keep the bias towards larger values\n  xs.append(0)\n  u = int(22 * n / i) + 30  # Keep the bias towards larger values\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          263,
          1.25,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(15 * n / i) + 10  # Further increased bias towards larger values by adding 10\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  \n  xs.extend([int(15 * n) + 10 for _ in range(2**n - 1)])  # Further increased bias towards larger values\n  xs.append(0)\n  u = int(20 * n / i) + 20  # Further increased bias towards larger values\n  ys.extend([u for _ in range(2**n)])\n  \n  return xs, ys\n\n"
        ],
        [
          325,
          1.2592592592592593,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v3`.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(10 * n / i) + 10  # Further reduce bias towards larger values\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u + 2 if i % 2 == 0 else u + 1 for _ in range(2**i)])  # Alternate adding 2 or 1 based on parity of i\n  xs.extend([int(10 * n) + 10 for _ in range(2**n - 1)])  # Further reduce bias towards larger values\n  xs.append(0)\n  u = int(16 * n / i) + 10  # Further reduce bias towards larger values\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          335,
          1.4,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(15 * n / i) + 5  # Further increased bias towards larger values by adding 5\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  \n  xs.extend([int(15 * n) + 5 for _ in range(2**n - 1)])  # Further increased bias towards larger values\n  xs.append(0)\n  u = int(18 * n / i) + 15  # Further increased bias towards larger values\n  ys.extend([u for _ in range(2**n)])\n  \n  return xs, ys\n\n"
        ],
        [
          381,
          1.441860465116279,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(12 * n / i) + 1  # Further increased bias towards larger values by adding 1\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  \n  xs.extend([int(12 * n) + 1 for _ in range(2**n - 1)])  # Further increased bias towards larger values\n  xs.append(0)\n  u = int(17 * n / i) + 6  # Further increased bias towards larger values\n  ys.extend([u for _ in range(2**n)])\n  \n  return xs, ys\n\n"
        ],
        [
          445,
          1.4666666666666666,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v0`.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(12 * n / i) + 2  # Further increased bias towards larger values by adding 1\n    xs.extend([u + 2 for _ in range(2**i)])  # Increased value by 1\n    ys.extend([u + 1 for _ in range(2**i)])  # Increased value by 1\n  \n  xs.extend([int(12 * n) + 2 for _ in range(2**n - 1)])  # Further increased bias towards larger values by adding 1\n  xs.append(0)\n  u = int(17 * n / i) + 7  # Further increased bias towards larger values by adding 1\n  ys.extend([u + 1 for _ in range(2**n)])  # Increased value by 1\n  \n  return xs, ys\n\n"
        ],
        [
          493,
          1.5,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Further increase the bias towards larger values and add more randomness.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(5 * n / i) + 2  # Further increased bias towards larger values by adding 1\n    xs.extend([u + 2 for _ in range(2**i)])  # Increased value by 1\n    ys.extend([u + 1 for _ in range(2**i)])  # Increased value by 1\n  \n  xs.extend([int(5 * n) + 2 for _ in range(2**n - 1)])  # Further increased bias towards larger values by adding 1\n  xs.append(0)\n  u = int(7 * n / i) + 4  # Further increased bias towards larger values by adding 1\n  ys.extend([u + 1 for _ in range(2**n)])  # Increased value by 1\n  \n  return xs, ys\n\n"
        ],
        [
          613,
          1.5405405405405406,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(10 * n / i)  # No change in bias towards larger values\n    xs.extend([u + 6 for _ in range(2**i)])  # No change in value\n    ys.extend([u + 3 for _ in range(2**i)])  # No change in value\n  \n  xs.extend([int(10 * n) for _ in range(2**n - 1)])  # No change in bias towards larger values\n  xs.append(0)\n  u = int(16 * n / i) + 2  # Further increased bias towards larger values by adding 1\n  ys.extend([u + 3 for _ in range(2**n)])  # No change in value\n  \n  return xs, ys\n\n"
        ],
        [
          633,
          1.5555555555555556,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(5 * n / i)  # Further decreased bias towards larger values\n    xs.extend([u + 3 for _ in range(2**i)])  # No change in value\n    ys.extend([u + 2 for _ in range(2**i)])  # No change in value\n  \n  xs.extend([int(5 * n) for _ in range(2**n - 1)])  # No change in bias towards larger values\n  xs.append(0)\n  u = int(8 * n / i)  # No change in bias towards larger values\n  ys.extend([u + 2 for _ in range(2**n)])  # No change in value\n  \n  return xs, ys\n\n"
        ],
        [
          1027,
          1.625,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)  # Decreased bias towards larger values\n    xs.extend([u + 2 for _ in range(2**i)])  # No change in value\n    ys.extend([u + 1 for _ in range(2**i)])  # No change in value\n  \n  xs.extend([int(2.5 * n) for _ in range(2**n - 1)])  # Slight decrease in bias towards larger values\n  xs.append(0)\n  u = int(4 * n / i)  # No change in bias towards larger values\n  ys.extend([u + 1 for _ in range(2**n)])  # No change in value\n  \n  return xs, ys\n\n"
        ]
      ],
      "successCount":737,
      "failureCount":368
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2 * n / i)\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2 * n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2 * n / i)\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          63,
          1.3333333333333333,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v1`.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n      u = i * 2 \n      v = 3 * i  # Change the relationship between u and v\n      xs.extend([u for _ in range(2**i)])\n      ys.extend([v for _ in range(2**i)])  # Create a large discrepancy between xs and ys\n  xs.extend([i * 3 for _ in range(2**n - 1)])\n  xs.append(0)\n  ys.extend([i * 2 for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          578,
          1.3636363636363635,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v8`.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n      u = i * 7\n      v = 8 * i\n      xs.extend([u for _ in range(2 ** i)])\n      ys.extend([v for _ in range(2 ** i)])  # Create an even larger discrepancy between xs and ys\n  xs.extend([i * 10 for _ in range(2 ** n - 1)])\n  xs.append(6)\n  ys.extend([i * 9 for _ in range(2 ** n)])\n  return xs, ys\n\n"
        ],
        [
          652,
          1.3888888888888888,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n      u = i * 5\n      v = 6 * i\n      xs.extend([u for _ in range(2 ** i)])\n      ys.extend([v for _ in range(2 ** i)])  # Create an even larger discrepancy between xs and ys\n  xs.extend([i * 8 for _ in range(2 ** n - 1)])\n  xs.append(3)\n  ys.extend([i * 7 for _ in range(2 ** n)])\n  return xs, ys\n\n"
        ],
        [
          712,
          1.4,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n      u = i * 6\n      v = 7 * i\n      xs.extend([u for _ in range(2 ** i)])\n      ys.extend([v for _ in range(2 ** i)])  # Create an even larger discrepancy between xs and ys\n  xs.extend([i * 9 for _ in range(2 ** n - 1)])\n  xs.append(3)\n  ys.extend([i * 8 for _ in range(2 ** n)])\n  return xs, ys\n\n"
        ],
        [
          714,
          1.4146341463414633,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v3`.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n      u = i * 12\n      v = 13 * i\n      xs.extend([u for _ in range(2**i)])  \n      ys.extend([v for _ in range(2**i)])  \n  xs.extend([i * 18 for _ in range(2**n - 1)])  \n  xs.append(2)\n  ys.extend([i * 15 for _ in range(2**n + 1)])  \n  return xs, ys\n\n"
        ],
        [
          765,
          1.4444444444444444,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n      u = i * 5\n      v = 6 * i\n      xs.extend([u for _ in range(2 ** i)])\n      ys.extend([v for _ in range(2 ** i)])  # Increasing the discrepancy even further\n  xs.extend([i * 8 for _ in range(2 ** n - 1)])\n  xs.append(2)\n  ys.extend([i * 7 for _ in range(2 ** n)])\n  return xs, ys\n\n"
        ],
        [
          837,
          1.5555555555555556,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v3`.\"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n      u = i * 5\n      v = 6 * i\n      xs.extend([u for _ in range(2 ** i)])\n      ys.extend([v for _ in range(2 ** i)])  # Increasing the discrepancy between xs and ys even more\n  xs.extend([i * 8 for _ in range(2 ** n)])\n  xs.append(0)\n  ys.extend([i * 7 for _ in range(2 ** n + 1)])\n  return xs, ys\n\n"
        ]
      ],
      "successCount":701,
      "failureCount":260
    }
  ]
}