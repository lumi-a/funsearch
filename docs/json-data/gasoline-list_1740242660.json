{
  "config":{
    "inputs":[
      3
    ],
    "specification":"\"\"\"Find sets for which the rounding algorithm on the gasoline-problem has a poor (high) approximation-ratio.\n\nThe gasoline-problem find a permutation of the xs and ys (lists of positive integers) such that maximum of the\ndifferences of prefix-sums is as small as possible, i.e. maximum_(m,n) zs[n]-zs[m] is as as small as possible,\nwhere zs[n] = xs[0] - ys[0] + xs[1] - ys[1] + ... + xs[n//2] - (ys[n] if n is odd else 0).\n\nAs such, the problem is invariant under a permutation of the xs and ys.\n\nOn every iteration, improve gasoline_v1 over the gasoline_vX methods from previous iterations.\nThe methods must be deterministic.\nMake only small code-changes.\n\"\"\"\n\nimport funsearch\nfrom funsearch.gasoline.iterative_rounding import SlotOrdered\n\n\n@funsearch.run\ndef evaluate(n: int) -> float:\n  \"\"\"Returns the approximation-ratio of the gasoline problem.\"\"\"\n  xs, ys = gasoline(n)\n\n  # Assert determinancy\n  if (xs, ys) != gasoline(n):\n    return 0\n\n  # Assert non-negativity\n  if any(x < 0 for x in xs) or any(y < 0 for y in ys):\n    return 0\n\n  return SlotOrdered().approximation_ratio(xs, ys)\n\n\n@funsearch.evolve\ndef gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys = [0 for _ in range(len(xs))]\n  return xs, ys\n",
    "problem_name":"gasoline-list",
    "message":"Perturb Lucas' solution by simply removing the ys",
    "functions_per_prompt":2,
    "num_islands":10,
    "reset_period":14400,
    "cluster_sampling_temperature_init":0.1,
    "cluster_sampling_temperature_period":30000
  },
  "timestamp":1740242660,
  "highestRunIndex":1164,
  "islands":[
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys = [0 for _ in range(len(xs))]\n  return xs, ys\n\n"
        ],
        [
          382,
          1.25,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = [n-i for i in range(n+1)]\n  ys = [i**2 for i in range(n+1)]\n  return xs, ys\n\n"
        ]
      ],
      "successCount":793,
      "failureCount":371
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys = [0 for _ in range(len(xs))]\n  return xs, ys\n\n"
        ],
        [
          139,
          1.3,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v4`.\"\"\"\n  xs = [0]\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u + 1 for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  ys = [int(2**n - 1) for _ in range(len(xs))]  # Change all ys to be the same value\n  ys[-1] += 1  # Change last element of ys to force high approximation ratio\n  return xs, ys\n\n"
        ],
        [
          147,
          1.4444444444444444,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v3`.\"\"\"\n  xs = [0]\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u + 1 for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  ys = [int(2**n - 1) for _ in range(len(xs))]  # Change all ys to be the same value\n\n  m = 2**n // 4\n  ys[m] += 1  # Change middle element of ys to force high approximation ratio\n  return xs, ys\n\n"
        ],
        [
          333,
          1.5555555555555556,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v3`.\"\"\"\n  xs = [0]\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u + 1 for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  \n  ys = [int(2**n - 1) for _ in range(len(xs))]  # Change all ys to be the same value\n  ys[2] = 1  # Change third element of ys to force high approximation ratio\n  return xs, ys\n\n"
        ],
        [
          426,
          1.7619047619047619,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Change the values of xs and ys to force high approximation ratio.\"\"\"\n  xs = [0]\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u + 1 for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  for i in range(len(xs)):\n    xs[i] += i  # Change each element of xs to be proportional to its index to force high approximation ratio\n\n  ys = [int(2**n - 1) for _ in range(len(xs))]  # Change all ys to be the same value\n  for i in range(len(ys)):\n    ys[i] += i  # Change each element of ys to be proportional to its index to force high approximation ratio\n  return xs, ys\n\n"
        ],
        [
          476,
          1.7647058823529411,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Change the values of xs and ys to force high approximation ratio.\"\"\"\n  xs = [0]\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u + 1 for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  for i in range(len(xs)):\n    xs[i] += i * 2  # Change each element of xs to be proportional to twice its index to force high approximation ratio\n\n  ys = [int(2**n - 1) for _ in range(len(xs))]  # Change all ys to be the same value\n  for i in range(len(ys)):\n    ys[i] += i * 2  # Change each element of ys to be proportional to twice its index to force high approximation ratio\n  return xs, ys\n\n"
        ],
        [
          520,
          1.7924528301886793,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Modify the distribution of values in xs and ys to force high approximation ratio.\"\"\"\n  xs = [0]\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u + 1 for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  for i in range(len(xs)):\n    xs[i] += (i // 2) * 3  # Change each element of xs to be proportional to half of its index multiplied by 3\n    xs[i] *= 2  # Further increase each element to enhance high approximation ratio\n    xs[i] += i % 2  # Add a factor based on parity to further increase approximation ratio\n\n  ys = [int(2**n - 1) for _ in range(len(xs))]  # Change all ys to be the same value\n  for i in range(len(ys)):\n    ys[i] += (i // 2) * 3  # Change each element of ys to be proportional to half of its index multiplied by 3\n    ys[i] *= 2  # Further increase each element to enhance high approximation ratio\n    ys[i] += i % 2  # Add a factor based on parity to further increase approximation ratio\n\n  return xs, ys\n\n"
        ],
        [
          578,
          1.8101265822784811,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Modify the distribution of values in xs and ys further to force high approximation ratio.\"\"\"\n  xs = [0]\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u + 1 for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  for i in range(len(xs)):\n    xs[i] += (i // 2) * 3  # Change each element of xs to be proportional to half of its index multiplied by 3\n    xs[i] *= 3  # Further increase each element to enhance high approximation ratio\n    xs[i] += i % 3  # Add a factor based on modulo of index to further increase approximation ratio\n\n  ys = [int(2**n - 1) for _ in range(len(xs))]  # Change all ys to be the same value\n  for i in range(len(ys)):\n    ys[i] += (i // 2) * 3  # Change each element of ys to be proportional to half of its index multiplied by 3\n    ys[i] *= 3  # Further increase each element to enhance high approximation ratio\n    ys[i] += i % 3  # Add a factor based on modulo of index to further increase approximation ratio\n\n  return xs, ys\n\n"
        ],
        [
          596,
          1.8227848101265822,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Further adjust the values of xs and ys to enhance the high approximation ratio.\"\"\"\n  xs = [0]\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u + 1 for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  for i in range(len(xs)):\n    xs[i] += (i // 2) * 3  # Change each element of xs to be proportional to half of its index multiplied by 3\n    xs[i] *= 3  # Further increase each element to enhance high approximation ratio\n    xs[i] += i % 4  # Add a factor based on modulo of index to further increase approximation ratio\n\n  ys = [int(2**n - 1) for _ in range(len(xs))]  # Change all ys to be the same value\n  for i in range(len(ys)):\n    ys[i] += (i // 2) * 3  # Change each element of ys to be proportional to half of its index multiplied by 3\n    ys[i] *= 3  # Further increase each element to enhance high approximation ratio\n    ys[i] += i % 4  # Add a factor based on modulo of index to further increase approximation ratio\n\n  return xs, ys\n\n"
        ],
        [
          690,
          1.8280254777070064,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Modify the distribution of values in xs and ys to force high approximation ratio.\"\"\"\n  xs = [0]\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u + 1 for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  for i in range(len(xs)):\n    xs[i] += (i // 2) * 3  # Change each element of xs to be proportional to half of its index multiplied by 3\n    xs[i] *= 6  # Further increase each element to enhance high approximation ratio\n    xs[i] += i % 6  # Add a factor based on modulus 6 to further increase approximation ratio\n\n  ys = [int(2**n - 1) for _ in range(len(xs))]  # Change all ys to be the same value\n  for i in range(len(ys)):\n    ys[i] += (i // 2) * 3  # Change each element of ys to be proportional to half of its index multiplied by 3\n    ys[i] *= 6  # Further increase each element to enhance high approximation ratio\n    ys[i] += i % 6  # Add a factor based on modulus 6 to further increase approximation ratio\n\n  return xs, ys\n\n"
        ]
      ],
      "successCount":589,
      "failureCount":391
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys = [0 for _ in range(len(xs))]\n  return xs, ys\n\n"
        ],
        [
          96,
          1.25,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = [n - i for i in range(n+1)]\n  ys = [i**2 for i in range(n+1)]\n\n  return xs, ys  # Permutation of xs and ys\n\n"
        ],
        [
          349,
          1.3333333333333333,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v8`.\"\"\"\n  xs = [2 * (n - i) for i in range(n + 1)]\n  ys = [2 * i + 1 for i in range(n + 1)]\n\n  return xs, ys\n\n"
        ],
        [
          826,
          3.999999999999998,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v8`.\"\"\"\n  xs = [1907348632812500000000 * (n - i) for i in range(n + 1)]\n  ys = [1907348632812500000000 * i + 953674316406250000000 for i in range(n + 1)]\n\n  return xs, ys\n\n"
        ],
        [
          840,
          7.000000000000002,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v7`.\"\"\"\n  xs = [953674316406250000000 + 1907348632812500000000 * (n - i) for i in range(n + 1)]\n  ys = [953674316406250000000 + 1907348632812500000000 * i for i in range(n + 1)]\n\n  return xs, ys\n\n"
        ],
        [
          864,
          7.314572799999993,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v8`.\"\"\"\n  xs = [953674316406250000000 + 2007348632812500000000 * (n - i) for i in range(n + 1)]\n  ys = [953674316406250000000 + 2007348632812500000000 * i for i in range(n + 1)]\n\n  return xs, ys\n\n"
        ],
        [
          891,
          22.055406079999994,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v8`.\"\"\"\n  xs = [953674316406250000000 + 10040000000000000000000 * (n - i) for i in range(n + 1)]\n  ys = [953674316406250000000 + 10040000000000000000000 * i for i in range(n + 1)]\n\n  return xs, ys\n\n"
        ]
      ],
      "successCount":639,
      "failureCount":313
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys = [0 for _ in range(len(xs))]\n  return xs, ys\n\n"
        ]
      ],
      "successCount":768,
      "failureCount":260
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys = [0 for _ in range(len(xs))]\n  return xs, ys\n\n"
        ],
        [
          155,
          1.375,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = [int(2**n * (1 - 2 ** (-i))) for i in range(1, n)]\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  \n  ys = [int(2**n * (1 - 2 ** (-i)) - i) for i in range(1, n)]\n  ys.extend([int(2**n) for _ in range(2**n - 1)])\n  ys.append(0)\n  \n  return xs, ys\n\n"
        ],
        [
          328,
          1.5,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  xs = [int(2**n * (1 - 2 ** (-i))) for i in range(1, n)]\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  \n  ys = [int(2**n * (1 - 2 ** (-i)) - i) for i in range(1, n)]\n  ys.extend([int(2**n) for _ in range(2**n - 1)])\n  ys.append(n)\n  \n  # Modify the first element of ys for different approximation ratio\n  ys[0] = n-1\n  \n  return xs, ys\n\n"
        ],
        [
          493,
          1.625,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = [int(2**n * (1 - 2 ** (-i))) for i in range(1, n)]\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  \n  ys = [int(2**n * (1 - 2 ** (-i)) - i) for i in range(1, n)]\n  ys.extend([int(2**n) for _ in range(2**n - 1)])\n  ys.append(n)\n  \n  # Modify the middle element of ys for different approximation ratio\n  middle_index = len(ys) // 2\n  ys[middle_index] = n * 2\n  \n  return xs, ys\n\n"
        ]
      ],
      "successCount":555,
      "failureCount":492
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys = [0 for _ in range(len(xs))]\n  return xs, ys\n\n"
        ],
        [
          839,
          1.0000000000000002,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = [(2 ** (n + 20) - i) for i in range(2 ** n)]  # Adjust the multiplier for xs, remove the division\n  ys = [(2 ** (n + 25) - i - 20) * (2 ** 25) for i in range(2 ** n)]  # Further increase the multiplier for ys\n  return xs, ys\n\n"
        ]
      ],
      "successCount":734,
      "failureCount":258
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys = [0 for _ in range(len(xs))]\n  return xs, ys\n\n"
        ],
        [
          496,
          1.1666666666666667,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"  \n  xs = [2*i for i in range(n, 0, -1)]      \n  ys = [i*3 for i in range(1, n+1)]  \n  return xs, ys\n\n"
        ],
        [
          874,
          1.2,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v7`.\"\"\"\n  \"\"\"Improves the rounding algorithm on the gasoline-problem by making small code changes.\"\"\"\n  xs = [2 * i - 1 for i in range(n, 0, -1)]\n  ys = [3 * i - 1 for i in range(1, n + 1)]\n  return xs, ys\n\n"
        ]
      ],
      "successCount":744,
      "failureCount":248
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys = [0 for _ in range(len(xs))]\n  return xs, ys\n\n"
        ],
        [
          618,
          1.0000000000000002,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v8`.\"\"\"\n  xs = [5**i for i in range(1, 3**n)]  # using a different base\n  ys = [4**i for i in range(len(xs) - 1)] + [6**i for i in range(3)]  # different values for ys\n  return xs, ys\n\n"
        ],
        [
          630,
          80.13015667929493,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  xs = [9**i for i in range(1, 3**n)]  # using a different base\n  ys = [8**i for i in range(len(xs) - 1)] + [10**i for i in range(3)]  # different values for ys\n  return xs, ys\n\n"
        ],
        [
          656,
          654.5246273954843,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  xs = [9**i for i in range(1, 3**n)]  # using a different base\n  ys = [8**i for i in range(1, len(xs)+1)] + [10**i for i in range(7)]  # different values for ys\n  return xs, ys\n\n"
        ],
        [
          708,
          735.2180967433602,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v3`.\"\"\"\n  xs = [9**i for i in range(1, 3**n)]  # using a different base\n  ys = [8**i for i in range(1, len(xs)+1)] + [10**i for i in range(2047)] + [2**i for i in range(2047)]  # same as v3\n  xs = xs[::-1]  # reversing xs\n  return xs, ys\n\n"
        ],
        [
          857,
          1000.7595190813057,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  xs = [10 ** i for i in range(1, 3 ** n)]  # using a different base\n  ys = [8 ** i for i in range(1, len(xs) + 1)] + [10 ** i for i in range(2047)] + [2 ** i for i in range(2047)]  # same as v3\n  xs = xs[::-1]  # reversing xs\n  return xs, ys\n\n"
        ],
        [
          917,
          1110010.0099940917,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Improved version of `gasoline_v2`.\"\"\"\n  xs =  [10 ** i for i in range(1, 3 ** n)]  # using a different base\n  ys = [8 ** i for i in range(1, len(xs) + 1)] + [10 ** i for i in range(2047)] + [2 ** i for i in range(2047)]  # same as v3\n  xs = xs[::-1]  # reversing xs\n  # increase the range of ys values\n  ys = [10 ** i for i in range(1, len(xs) + 1)] + [2 ** i for i in range(2047)] + [8 ** i for i in range(2047)]\n  return xs, ys\n\n"
        ]
      ],
      "successCount":582,
      "failureCount":389
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys = [0 for _ in range(len(xs))]\n  return xs, ys\n\n"
        ],
        [
          964,
          1.0000000000000004,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u + 120*i for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n\n  # Modify the ys list further to worsen the approximation-ratio\n  ys = [0 for _ in range(len(xs))]\n  for i in range(len(xs)):\n    if i % 6 == 0:\n      ys[i] = 10**18\n\n  return xs, ys\n\n"
        ]
      ],
      "successCount":538,
      "failureCount":462
    },
    {
      "improvements":[
        [
          0,
          1.0,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys = [0 for _ in range(len(xs))]\n  return xs, ys\n\n"
        ],
        [
          814,
          1.0000003333334444,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers are always non-negative.\n  \"\"\"\n  xs = [i * 10**6 for i in range(1, n+1)]  # Generate large x-values\n  ys = [i * 10**6 - 1 for i in range(n, 0, -1)]  # Generate large y-values in descending order, one less than before\n  return xs, ys  # Return xs and ys as they are\n\n"
        ]
      ],
      "successCount":756,
      "failureCount":200
    }
  ]
}