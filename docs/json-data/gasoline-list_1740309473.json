{
  "config":{
    "inputs":[
      3
    ],
    "specification":"\"\"\"Find sets for which the rounding algorithm on the gasoline-problem has a poor (high) approximation-ratio.\n\nThe gasoline-problem find a permutation of the xs and ys (lists of positive integers) such that maximum of the\ndifferences of prefix-sums is as small as possible, i.e. maximum_(m,n) zs[n]-zs[m] is as as small as possible,\nwhere zs[n] = xs[0] - ys[0] + xs[1] - ys[1] + ... + xs[n//2] - (ys[n] if n is odd else 0).\n\nAs such, the problem is invariant under a permutation of the xs and ys.\n\nOn every iteration, improve gasoline_v1 over the gasoline_vX methods from previous iterations.\nThe methods must be deterministic.\nMake only small code-changes.\n\"\"\"\n\nimport funsearch\nfrom funsearch.gasoline.iterative_rounding import SlotOrdered\n\n\n@funsearch.run\ndef evaluate(n: int) -> float:\n  \"\"\"Returns the approximation-ratio of the gasoline problem.\"\"\"\n  xs, ys = gasoline(n)\n\n  # Assert determinancy\n  if (xs, ys) != gasoline(n):\n    return 0\n\n  xs = [max(0, min(2**31 - 1, int(x))) for x in xs]\n  ys = [max(0, min(2**31 - 1, int(y))) for y in ys]\n\n  return SlotOrdered().approximation_ratio(xs, ys)\n\n\n@funsearch.evolve\ndef gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers will be clamped to [0, 2**31 - 1].\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n",
    "problem_name":"gasoline-list",
    "message":"Start from Lucas' solution.\n\nThe only found improvement gasoline(<span class=\"math\">k</span>) seems to have the same approximation-ratio, and operate very similarly to, Lucas' solution with parameter <span class=\"math\">k+1</span>.\n\nFound solution (each entry multiplied by 2, to compare more easily to Lucas' solution) on <span class=\"math\">k=2</span>, and Lucas' solution on <span class=\"math\">k=3</span>. Both have approximation-ratio 1.75. The found solution has fewer entries.\n\n```py\n([4, 4, 6, 6, 6, 6, 8, 8, 8, 8, 0],          [4, 4, 6, 6, 6, 6, 6, 6, 6, 8])\n([4, 4, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 0], [4, 4, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7])\n```\nFound solution (each entry multiplied by 2, to compare more easily to Lucas' solution) on <span class=\"math\">k=3</span>, and Lucas' solution on <span class=\"math\">k=4</span>. Both have approximation-ratio 1.875. The found solution has fewer entries.\n\n```py\n([8, 8, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 16, 16, 16, 0],\n [8, 8, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 16])\n([8, 8, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0],\n [8, 8, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15])\n```\n",
    "functions_per_prompt":2,
    "num_islands":10,
    "reset_period":14400,
    "cluster_sampling_temperature_init":0.1,
    "cluster_sampling_temperature_period":30000
  },
  "timestamp":1740309473,
  "highestRunIndex":1103,
  "islands":[
    {
      "improvements":[
        [
          0,
          1.75,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers will be clamped to [0, 2**31 - 1].\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ]
      ],
      "successCount":585,
      "failureCount":441
    },
    {
      "improvements":[
        [
          0,
          1.75,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers will be clamped to [0, 2**31 - 1].\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ]
      ],
      "successCount":636,
      "failureCount":401
    },
    {
      "improvements":[
        [
          0,
          1.75,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers will be clamped to [0, 2**31 - 1].\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ]
      ],
      "successCount":386,
      "failureCount":570
    },
    {
      "improvements":[
        [
          0,
          1.75,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers will be clamped to [0, 2**31 - 1].\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ],
        [
          322,
          1.875,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers will be clamped to [0, 2**31 - 1].\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n+1):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys.extend([u for _ in range(2**n)])\n  ys[-1] += 1  # Make a small code-change\n  return xs, ys\n\n"
        ]
      ],
      "successCount":458,
      "failureCount":590
    },
    {
      "improvements":[
        [
          0,
          1.75,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers will be clamped to [0, 2**31 - 1].\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ]
      ],
      "successCount":586,
      "failureCount":365
    },
    {
      "improvements":[
        [
          0,
          1.75,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers will be clamped to [0, 2**31 - 1].\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ]
      ],
      "successCount":444,
      "failureCount":489
    },
    {
      "improvements":[
        [
          0,
          1.75,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers will be clamped to [0, 2**31 - 1].\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ]
      ],
      "successCount":651,
      "failureCount":367
    },
    {
      "improvements":[
        [
          0,
          1.75,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers will be clamped to [0, 2**31 - 1].\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ]
      ],
      "successCount":645,
      "failureCount":458
    },
    {
      "improvements":[
        [
          0,
          1.75,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers will be clamped to [0, 2**31 - 1].\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ]
      ],
      "successCount":588,
      "failureCount":394
    },
    {
      "improvements":[
        [
          0,
          1.75,
          "def gasoline(n: int) -> tuple[list[int], list[int]]:\n  \"\"\"Return a new gasoline-problem, specified by the list of x-values and y-values.\n  The integers will be clamped to [0, 2**31 - 1].\n  \"\"\"\n  xs, ys = [], []\n  for i in range(1, n):\n    u = int(2**n * (1 - 2 ** (-i)))\n    xs.extend([u for _ in range(2**i)])\n    ys.extend([u for _ in range(2**i)])\n  xs.extend([int(2**n) for _ in range(2**n - 1)])\n  xs.append(0)\n  u = int(2**n * (1 - 2 ** (-n)))\n  ys.extend([u for _ in range(2**n)])\n  return xs, ys\n\n"
        ]
      ],
      "successCount":667,
      "failureCount":306
    }
  ]
}