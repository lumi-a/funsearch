{
  "config":{
    "inputs":[
      0
    ],
    "specification":"\"\"\"Find a good online-heuristic for the library-problem.\n\nIn the library-problem, we consider a physical library with a limited number of bookshelves.\nReaders come in and ask to see a book. If we currently have it on display, the reader can simply\nread it and then leave. When we don't have it on display, we need to order it, and put it on\ndisplay, which incurs a cost for us. If the bookshelves are already full, we must throw out another\nbook.\n\nReaders arrive sequentially, and each reader arrives only after the previous reader has left and we\n(if necessary) ordered and displayed the book the previous reader requested.\nOur goal is to minimise the number of books we need to order, i.e. maximize the negative number of orders.\n\nWe need to make decisions on-line, meaning we only know the current readers' request, and the\nrequests of a limited number of readers before them. Books are idealised as integers.\n\"\"\"\n\nfrom collections import deque\nimport random\n\nimport funsearch\nfrom funsearch.library import read_accesses\n\ntype Book = int\n\n\n@funsearch.run\ndef evaluate(_) -> float:\n  \"\"\"Returns the (negative) number of orders the library had to make.\"\"\"\n  shelf_space = 30\n  bookshelf = set()\n  past_reader_requests = deque(maxlen=2048)\n  book_orders = 0\n\n  for book in read_accesses():\n    if book not in bookshelf:\n      book_orders += 1\n      if len(bookshelf) < shelf_space:\n        bookshelf.add(book)\n      else:\n        book_to_replace = replace(past_reader_requests.copy(), bookshelf.copy(), book)\n        # Enforce determinism\n        deterministic = book_to_replace == replace(past_reader_requests.copy(), bookshelf.copy(), book)\n        if book_to_replace not in bookshelf or not deterministic:\n          # Remove the book with the smallest id:\n          book_to_replace = min(bookshelf)\n        bookshelf.remove(book_to_replace)\n        bookshelf.add(book)\n\n    past_reader_requests.append(book)\n\n  return -book_orders\n\n\n@funsearch.evolve\ndef replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  return min(bookshelf)\n",
    "problem_name":"library",
    "message":"Simulated paging-problem.\n\nTo simulate random accesses, we generated a list of 2\u00b9\u2076 random accesses as follows: Each number in {0,...,99} was assigned an  (iid) exponentially-distributed weight, \u03bb=1. The 2\u00b9\u2076 random accesses were then drawn iid from {0,...,99}, where a number <span class=\"math\">x</span> had probability weight(<span class=\"math\">x</span>)/sum(weights) of being drawn.\n\nThe following list is the number of occurences of each <span class=\"math\">x</span> (from {0,...99}) in the randomly-generated access-list:\n\n```py\n[134, 151, 827, 124, 132, 314, 811, 1171, 179, 770, 626, 137, 543, 1029, 783, 219, 543, 1100, 113, 529, 681, 245, 246, 75, 4, 1395, 704, 96, 35, 11, 37, 1574, 1002, 1009, 1394, 1365, 464, 87, 1724, 142, 411, 275, 1379, 1082, 175, 84, 877, 824, 918, 2109, 423, 1173, 401, 804, 364, 62, 445, 776, 875, 87, 1065, 1292, 1977, 599, 327, 54, 957, 904, 145, 289, 183, 9, 464, 1019, 1334, 913, 428, 352, 927, 245, 86, 219, 2671, 803, 875, 1558, 1056, 326, 1419, 626, 123, 1380, 327, 886, 423, 4, 749, 1329, 1082, 42]\n```\n",
    "functions_per_prompt":2,
    "num_islands":10,
    "reset_period":14400,
    "cluster_sampling_temperature_init":0.1,
    "cluster_sampling_temperature_period":30000
  },
  "timestamp":1740424536,
  "highestRunIndex":218,
  "islands":[
    {
      "improvements":[
        [
          0,
          -42707.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  return min(bookshelf)\n\n"
        ],
        [
          5,
          -35033.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Initialize dictionary to keep track of when books were last accessed\n  last_access = {book: -1 for book in bookshelf}\n\n  # Update last accessed time based on past reader requests\n  for i, book in enumerate(past_reader_requests):\n    last_access[book] = i\n\n  # Find the book on the bookshelf that was accessed furthest in the past\n  book_to_replace = min(bookshelf, key=lambda x: last_access[x])\n\n  return book_to_replace\n\n"
        ],
        [
          8,
          -27155.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Keep track of the frequency of each book in the past reader requests\n  book_frequency = {}\n  for book in past_reader_requests:\n    if book in book_frequency:\n      book_frequency[book] += 1\n    else:\n      book_frequency[book] = 1\n\n  # Check which book on the bookshelf has the lowest frequency in the past reader requests\n  min_frequency = float('inf')\n  min_book = None\n  for book in bookshelf:\n    if book_frequency.get(book, 0) < min_frequency:\n      min_frequency = book_frequency[book]\n      min_book = book\n\n  return min_book\n\n"
        ]
      ],
      "successCount":152,
      "failureCount":37
    },
    {
      "improvements":[
        [
          0,
          -42707.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  return min(bookshelf)\n\n"
        ],
        [
          3,
          -27155.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Keep track of the frequency of each book on the bookshelf\n  book_frequency = {book: 0 for book in bookshelf}\n\n  # Update the frequency of past reader requests\n  for request in past_reader_requests:\n    if request in bookshelf:\n      book_frequency[request] += 1\n\n  # Find the book with the lowest frequency and replace it with the ordered book\n  min_book = min(book_frequency, key=book_frequency.get)\n  return min_book\n\n"
        ]
      ],
      "successCount":184,
      "failureCount":24
    },
    {
      "improvements":[
        [
          0,
          -42707.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  return min(bookshelf)\n\n"
        ],
        [
          2,
          -41340.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Use a random replacement strategy instead of always choosing the minimum book\n  return random.choice(list(bookshelf))\n\n"
        ],
        [
          4,
          -41283.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Check if the ordered book is already on the bookshelf\n  if book_order in bookshelf:\n    return None\n  \n  # Check if there is a book on the bookshelf that has not been requested by any reader\n  for book in bookshelf:\n    if book not in past_reader_requests:\n      return book\n  \n  # If no book meets the criteria above, randomly select a book to replace\n  return random.choice(list(bookshelf))\n\n"
        ],
        [
          9,
          -41252.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # If the book order is in the bookshelf, do nothing\n  if book_order in bookshelf:\n    return None\n\n  # Check if there is a book on the bookshelf that has not been requested by any reader\n  for book in bookshelf:\n    if book not in past_reader_requests:\n      return book\n\n  # If no book meets the criteria above, randomly select a book to replace\n  return random.choice(list(bookshelf))\n\n"
        ],
        [
          11,
          -31924.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Check if the book order is already on the bookshelf\n  if book_order in bookshelf:\n    return None\n\n  # Check if there is a book on the bookshelf that has not been requested by any reader\n  for book in bookshelf:\n    if book not in past_reader_requests:\n      return book\n\n  # If no book meets the criteria above, select the book that will be requested the farthest in the future\n  farthest_future_request = float('-inf')\n  book_to_replace = None\n  for book in bookshelf:\n    if book not in past_reader_requests:\n      continue\n    future_request_index = past_reader_requests.index(book)\n    if future_request_index > farthest_future_request:\n      farthest_future_request = future_request_index\n      book_to_replace = book\n\n  return book_to_replace\n\n"
        ],
        [
          113,
          -27155.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Keep track of the frequency of each book on the bookshelf\n  book_frequency = {book: 0 for book in bookshelf}\n  for past_request in past_reader_requests:\n    if past_request in bookshelf:\n      book_frequency[past_request] += 1\n\n  # Check if there is a book on the bookshelf that has not been requested by any reader\n  for book in bookshelf:\n    if book_frequency[book] == 0:\n      return book\n\n  # If no book meets the criteria above, select the book with the lowest frequency\n  min_frequency = float('inf')\n  book_to_replace = None\n  for book in bookshelf:\n    if book_frequency[book] < min_frequency:\n      min_frequency = book_frequency[book]\n      book_to_replace = book\n\n  return book_to_replace\n\n"
        ]
      ],
      "successCount":168,
      "failureCount":27
    },
    {
      "improvements":[
        [
          0,
          -42707.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  return min(bookshelf)\n\n"
        ],
        [
          1,
          -40940.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Check if the book_order is already in the bookshelf\n  if book_order in bookshelf:\n    return None\n\n  # Check if any book on the bookshelf will never be requested again\n  for book in bookshelf:\n    if book not in past_reader_requests:\n      return book\n\n  # If no book will never be requested again, return a random book from the bookshelf\n  return random.choice(list(bookshelf))\n\n"
        ],
        [
          10,
          -31924.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  if book_order in bookshelf:\n    return None\n\n  # Check if any book on the bookshelf will never be requested again\n  for book in bookshelf:\n    if book not in past_reader_requests:\n      return book\n\n  # If no book will never be requested again, return the book that will be requested farthest in the future\n  max_future_index = -1\n  max_future_book = None\n  for book in bookshelf:\n    future_index = next((i for i, x in enumerate(past_reader_requests) if x == book), None)\n    if future_index is None:\n      return book\n    if future_index > max_future_index:\n      max_future_index = future_index\n      max_future_book = book\n\n  return max_future_book\n\n"
        ],
        [
          48,
          -27155.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  \"\"\"Improved version of `replace_v2`.\n\n  Accounts for the frequency of book requests in the future.\n  \"\"\"\n  if book_order in bookshelf:\n    return None  # No need to replace any book\n\n  # Initialize dictionary to store the frequency of future requests for each book on the bookshelf\n  future_requests = {book: 0 for book in bookshelf}\n\n  # Count the number of future requests for each book on the bookshelf\n  for i, book in enumerate(past_reader_requests):\n    if book in future_requests:\n      future_requests[book] += 1\n\n  # Find the book with the lowest future request frequency to replace\n  min_future_requests = float('inf')\n  book_to_replace = None\n  for book, freq in future_requests.items():\n    if freq < min_future_requests:\n      min_future_requests = freq\n      book_to_replace = book\n\n  return book_to_replace\n\n"
        ]
      ],
      "successCount":185,
      "failureCount":33
    },
    {
      "improvements":[
        [
          0,
          -42707.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  return min(bookshelf)\n\n"
        ],
        [
          3,
          -27377.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Keep track of the frequency of each book on the bookshelf\n  book_freq = {book: 0 for book in bookshelf}\n  for request in past_reader_requests:\n    if request in bookshelf:\n      book_freq[request] += 1\n\n  # Find the book with the lowest frequency to replace\n  min_freq = min(book_freq.values())\n  books_to_replace = [book for book, freq in book_freq.items() if freq == min_freq]\n\n  # If there are multiple books with the lowest frequency, choose randomly\n  return random.choice(books_to_replace)\n\n"
        ],
        [
          10,
          -27211.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  book_freq = {book: 0 for book in bookshelf}\n  for request in past_reader_requests:\n    if request in bookshelf:\n      book_freq[request] += 1\n\n  # Find the book with the lowest frequency to replace\n  min_freq = min(book_freq.values())\n  books_to_replace = [book for book, freq in book_freq.items() if freq == min_freq]\n\n  # If there are multiple books with the lowest frequency, choose the one that is farthest in the past\n  index_dict = {book: past_reader_requests.index(book) for book in books_to_replace}\n  book_to_replace = min(index_dict, key=index_dict.get)\n\n  return book_to_replace\n\n"
        ],
        [
          15,
          -27206.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  book_freq = {book: 0 for book in bookshelf}\n  for request in past_reader_requests:\n    if request in bookshelf:\n      book_freq[request] += 1\n\n  # Find the book with the lowest frequency to replace\n  min_freq = min(book_freq.values())\n  books_to_replace = [book for book, freq in book_freq.items() if freq == min_freq]\n\n  # If there are multiple books with the lowest frequency, choose the one that is farthest in the past\n  book_to_replace = None\n  max_index = -1\n  for book in books_to_replace:\n    index = past_reader_requests.index(book)\n    if index > max_index:\n      max_index = index\n      book_to_replace = book\n\n  return book_to_replace\n\n"
        ],
        [
          88,
          -27155.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  book_freq = {book: 0 for book in bookshelf}\n\n  # Update book frequency based on past reader requests\n  for request in past_reader_requests:\n    if request in bookshelf:\n      book_freq[request] += 1\n\n  # The highest frequency is set to a very large number initially\n  max_freq = float(\"inf\")\n\n  # Find the book with the highest frequency to replace\n  for book, freq in book_freq.items():\n    if freq < max_freq:\n      max_freq = freq\n      book_to_replace = book\n\n  return book_to_replace\n\n"
        ]
      ],
      "successCount":178,
      "failureCount":30
    },
    {
      "improvements":[
        [
          0,
          -42707.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  return min(bookshelf)\n\n"
        ],
        [
          6,
          -41899.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Calculate the cost of replacing each book on the bookshelf\n  max_cost = float('-inf')\n  replace_book = None\n  for book in bookshelf:\n    # Calculate the cost of replacing book with the ordered book\n    cost = 0\n    if book_order not in past_reader_requests:\n      cost -= 1  # Negative cost for avoiding an order\n    if book not in past_reader_requests:\n      cost += 1  # Positive cost for losing a book\n    if cost > max_cost:\n      max_cost = cost\n      replace_book = book\n  return replace_book\n\n"
        ],
        [
          12,
          -27155.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Define a weight for each book based on frequency of access\n  book_weights = {book: 1 for book in bookshelf}\n  for past_request in past_reader_requests:\n    if past_request in book_weights:\n      book_weights[past_request] += 1\n\n  # Choose the book to replace based on weight\n  min_weight = float('inf')\n  replace_book = None\n  for book, weight in book_weights.items():\n    if weight < min_weight:\n      min_weight = weight\n      replace_book = book\n  \n  return replace_book\n\n"
        ]
      ],
      "successCount":163,
      "failureCount":25
    },
    {
      "improvements":[
        [
          0,
          -42707.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  return min(bookshelf)\n\n"
        ],
        [
          4,
          -39632.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # calculate the distance of each book on the bookshelf from the current ordered book\n  distances = {book: abs(book - book_order) for book in bookshelf}\n  \n  # find the book with the maximum distance from the ordered book\n  return max(distances, key=distances.get)\n\n"
        ],
        [
          5,
          -27155.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Calculate the number of times each book has been requested in the past\n  request_counts = {book: 0 for book in bookshelf}\n  for request in past_reader_requests:\n    if request in request_counts:\n      request_counts[request] += 1\n\n  # Find the book on the bookshelf that has been requested the least in the past\n  least_requested_book = min(request_counts, key=request_counts.get)\n  return least_requested_book\n\n"
        ]
      ],
      "successCount":169,
      "failureCount":43
    },
    {
      "improvements":[
        [
          0,
          -42707.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  return min(bookshelf)\n\n"
        ],
        [
          2,
          -42244.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Initialize variables\n  potential_books = set(past_reader_requests)  # All unique books that have been requested\n  book_to_replace = None\n\n  # Find a book in the bookshelf that will not be requested again\n  for book in bookshelf:\n    if book not in potential_books:\n      book_to_replace = book\n      break\n\n  # If no such book exists, replace a book that will not be requested in the near future\n  if book_to_replace is None:\n    potential_future_requests = []\n    for i in range(len(past_reader_requests)-1, -1, -1):\n      if len(potential_future_requests) == 2:\n        break\n      if past_reader_requests[i] not in bookshelf and past_reader_requests[i] not in potential_future_requests:\n        potential_future_requests.append(past_reader_requests[i])\n\n    book_to_replace = min(potential_future_requests) if len(potential_future_requests) > 0 else min(bookshelf)\n\n  return book_to_replace\n\n"
        ],
        [
          4,
          -35033.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Initialize a dictionary to keep track of when each book was last accessed\n  last_access = {book: float('inf') for book in bookshelf}\n\n  # Update the last_access dictionary based on the past reader requests\n  for i, request in enumerate(past_reader_requests):\n    last_access[request] = i\n\n  # Find the book on the bookshelf that was least recently accessed\n  return min(bookshelf, key=lambda x: last_access[x])\n\n"
        ],
        [
          37,
          -27155.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Initialize a counter for each book on the bookshelf to keep track of how many times it has been accessed\n  access_count = {book: 0 for book in bookshelf}\n\n  # Update the access count based on past reader requests\n  for request in past_reader_requests:\n    if request in access_count:\n      access_count[request] += 1\n\n  # Find the book on the bookshelf that has been accessed the least number of times\n  return min(bookshelf, key=access_count.get)\n\n"
        ]
      ],
      "successCount":145,
      "failureCount":34
    },
    {
      "improvements":[
        [
          0,
          -42707.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  return min(bookshelf)\n\n"
        ],
        [
          8,
          -42219.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # If the book_order is in the bookshelf, we don't need to replace anything\n  if book_order in bookshelf:\n    return None\n\n  # If the book_order is not in the bookshelf, we need to find a book to replace\n  # We calculate the frequency of each book on the bookshelf and past_reader_requests\n  book_freq = {}\n  for book in bookshelf:\n    book_freq[book] = book_freq.get(book, 0) + 1\n  for request in past_reader_requests:\n    book_freq[request] = book_freq.get(request, 0) + 1\n\n  # Find the book with the lowest frequency (least recently requested) and replace it with the book_order\n  least_requested_book = min(book_freq, key=book_freq.get)\n  return least_requested_book\n\n"
        ],
        [
          19,
          -27206.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  if book_order in bookshelf:\n    return None\n\n  # If the bookshelf is not full, simply add the book_order to the bookshelf\n  if len(bookshelf) < len(bookshelf):\n    return None\n\n  # Calculate the frequency of each book on the bookshelf and past_reader_requests\n  book_freq = {}\n  for book in bookshelf:\n    book_freq[book] = book_freq.get(book, 0) + 1\n  for request in past_reader_requests:\n    book_freq[request] = book_freq.get(request, 0) + 1\n\n  # Find the least requested book with the highest index and replace it with the book_order\n  least_requested_book = min(bookshelf, key=lambda x: (book_freq.get(x, 0), -past_reader_requests.index(x)))\n  return least_requested_book\n\n"
        ],
        [
          84,
          -27155.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  if book_order in bookshelf:\n    return None\n\n  # If the bookshelf is not full, simply add the book_order to the bookshelf\n  if len(bookshelf) < len(bookshelf):\n    return None\n\n  # Calculate the frequency of each book on the bookshelf and past_reader_requests\n  book_freq = {}\n  for book in bookshelf:\n    book_freq[book] = book_freq.get(book, 0) + 1\n  for request in past_reader_requests:\n    book_freq[request] = book_freq.get(request, 0) + 1\n\n  # Find the least requested book with the highest index and replace it with the book_order\n  least_requested_books = [b for b in bookshelf if book_freq.get(b, 0) == min(book_freq.values())]\n  return random.choice(least_requested_books) if least_requested_books else min(bookshelf, key=lambda x: book_freq.get(x, 0))\n\n"
        ]
      ],
      "successCount":176,
      "failureCount":29
    },
    {
      "improvements":[
        [
          0,
          -42707.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  return min(bookshelf)\n\n"
        ],
        [
          1,
          -41280.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Calculate the number of unique books we need to order\n  unique_books_ordered = len(set(past_reader_requests) - bookshelf)\n  \n  # If we need to order the book anyways, replace a random book\n  if book_order not in bookshelf:\n      return random.choice(tuple(bookshelf))\n  \n  # If we don't need to order the book, replace the least recently accessed book\n  lra = None\n  min_count = float('inf')\n  for book in bookshelf:\n      count = read_accesses(past_reader_requests, book)\n      if count < min_count:\n          min_count = count\n          lra = book\n  \n  return lra\n\n"
        ],
        [
          2,
          -27155.0,
          "def replace(past_reader_requests: deque[Book], bookshelf: set[Book], book_order: Book) -> Book:\n  \"\"\"Given our past reader requests (from oldest to newest), the current bookshelf, and the book\n  that we'll order, return the book on our bookshelf that should be replaced by the ordered book.\n\n  The bookshelf will always be full, and the book_order will never be in the bookshelf.\n  \"\"\"\n  # Let's keep track of the number of times each book has been requested\n  book_count = {book: 0 for book in bookshelf}\n\n  # Update the book count based on past reader requests\n  for request in past_reader_requests:\n    if request in book_count:\n      book_count[request] += 1\n\n  # Choose the book with the lowest count to replace\n  replace_book = min(book_count, key=book_count.get)\n  return replace_book\n\n"
        ]
      ],
      "successCount":170,
      "failureCount":37
    }
  ]
}